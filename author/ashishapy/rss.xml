<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>blog.ashishapy.com</title>
   
   <link>https://blog.ashishapy.com/</link>
   <description>Amused at technology</description>
   <language>en-uk</language>
   <managingEditor> Ashish Pandey</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Container (Docker) Management Framework - An Introduction</title>
	  <link>//2017/07/container-management-framework/</link>
	  <author>Ashish Pandey</author>
	  <pubDate>2017-07-02T06:00:00+00:00</pubDate>
	  <guid>//2017/07/container-management-framework/</guid>
	  <description><![CDATA[
	     <p>In case you haven’t noticed, we are on rapid march towards realising full capacity of cloud infrastructure &amp; its services. Having multi cloud, hybrid infrastructure &amp; avoid vendor locking is the dream!</p>

<p>Building &amp; running your apps in container on cloud is major step towards the dream. Few months back I wrote, presented &amp; talked on <a href="//blog.ashishapy.com/2016/03/docker-with-devops/">Docker with DevOps - One step towards Microservices</a>, <a href="//blog.ashishapy.com/2016/04/docker-ecosystem-for-microservice-cluster/">Docker Ecosystem for Microservices</a> &amp; <a href="//blog.ashishapy.com/2016/09/self-healing-system-using-docker/">Self-Healing Systems using Docker</a>. These blog posts/presentations help you in understanding basics &amp; benefits of cloud, Docker, DevOps.</p>

<p><em>Containers (aka Docker)</em> comes with some benefits &amp; complexities. Your apps in container without <em>container management framework</em>, are like your luxury car without wheels &amp; steering.</p>

<p>This post is series of questions &amp; answers, I ask myself &amp; answer myself. 
Weirdo!</p>

<p>Let’s start . . .</p>

<h3 id="what-is-container-management-framework">What is Container Management Framework?</h3>

<p>A container management framework is a solution used to build, ship &amp; deploy your app in containers. Docker, as a container has become a standard.</p>

<p>Container Management Framework helps you to build <strong><em>CaaS (Container as a Service)</em></strong> solution.</p>

<blockquote>
  <p><strong>Containers as a Service (CaaS)</strong> is a model where IT organisations and developers can work together to build, ship and run their applications anywhere. CaaS enables an IT secured and managed application environment consisting of content and infrastructure, from which developers are able build and deploy applications in a self service manner.
- <a href="https://blog.docker.com/2016/02/containers-as-a-service-caas/">Docker</a></p>
</blockquote>

<h3 id="are-they-different-from-container-orchestrator-tool">Are they different from Container Orchestrator tool?</h3>

<p>Yes…
Orchestration is just a piece of the puzzle, but choice of the orchestration layer often drives the ‘Container Management Framework’ selection decision.</p>

<p>Some popular container orchestration tools are as following.</p>

<ol>
  <li><a href="https://docs.docker.com/engine/swarm/">Docker Swarm</a></li>
  <li><a href="https://kubernetes.io/">Kubernetes</a></li>
  <li><a href="http://mesos.apache.org/">Apache Mesos</a></li>
</ol>

<p>Don’t be blinded by orchestration capabilities. Focus on governance, security and policy enforcement; this will be the most important factor for production workloads.</p>

<blockquote>
  <p>Orchestration tools are very much IT operation (ITOps) focused &amp; don’t solve full life-cycle of application (Dev).</p>
</blockquote>

<p>Container Management Framework goes beyond the orchestration &amp; will not only integrate the various management elements to form a whole, but also ensure that the management elements are compatible with each other.</p>

<h3 id="good-can-you-name-some-of-container-management-framework">Good! Can you name some of Container Management Framework?</h3>

<p>Sure, followings are some popular container management frameworks.</p>

<ul>
  <li><a href="https://www.docker.com/enterprise-edition">Docker Enterprise</a></li>
  <li><a href="https://www.openshift.com/">RedHat OpenShift</a></li>
  <li><a href="https://mesosphere.com/product/">Mesosphere Enterprise DC/OS</a></li>
  <li><a href="https://coreos.com/tectonic/">CoreOS Tectonic</a></li>
  <li><a href="http://rancher.com/">Rancher</a></li>
  <li><a href="https://www.apcera.com/">Apcera</a></li>
  <li><a href="https://apprenda.com/">Apprenda</a></li>
</ul>

<p>From popular cloud providers:</p>

<ul>
  <li><a href="https://aws.amazon.com/ecs/">Amazon ECS</a></li>
  <li><a href="https://cloud.google.com/container-engine/">Google GKE</a></li>
  <li><a href="https://azure.microsoft.com/en-in/services/container-service/">Microsoft ACS</a></li>
</ul>

<h3 id="ok-what-does-container-management-framework-bring-on-table">Ok, what does container management framework bring on table?</h3>

<p><strong>1) Scheduling of containers:</strong></p>

<p><code class="highlighter-rouge">Placement, replication, scaling, rescheduling, upgrades, rollback of containers.</code></p>

<p><strong>2) Computing resource management:</strong></p>

<p><code class="highlighter-rouge">Memory, cpu, volume, port, ip, image, network of containers.</code></p>

<p><strong>3) Management of services:</strong></p>

<p><code class="highlighter-rouge">Service discovery &amp; orchestrating multiple containers together (using label, group, namespace, load balancing, readiness checking, health checking).</code></p>

<p><strong>4) Governance:</strong></p>

<p><code class="highlighter-rouge">Access control, isolation, resource utilisation, limits &amp; quotas, network segmentation &amp; encryption.</code></p>

<p>All above capabilities are usually solved by <strong>orchestration tools</strong>. There are more container management framework, can do for us.</p>

<h3 id="okey-what-else-can-container-management-framework-do-for-us">Okey! what else can container management framework do for us?</h3>

<p>They should provide seamless integration with -</p>

<p><strong>5) Image registry:</strong></p>

<p><code class="highlighter-rouge">A place where you can store &amp; distribute container (Docker) images.</code></p>

<p>Tools:</p>

<ul>
  <li><a href="https://docs.docker.com/datacenter/dtr/2.2/guides/">Docker Trusted Registry</a></li>
  <li><a href="https://quay.io/">Quay</a></li>
  <li><a href="https://www.jfrog.com/article/docker-registry/">Artifactory</a></li>
  <li>
    <p><a href="https://www.sonatype.com/docker">Nexus</a></p>
  </li>
  <li><a href="https://hub.docker.com/">Docker Hub</a></li>
  <li><a href="https://aws.amazon.com/ecr/">AWS ECR</a></li>
  <li><a href="https://cloud.google.com/container-registry/">Google Container Registry</a></li>
  <li><a href="https://azure.microsoft.com/en-in/services/container-registry/">Azure Container Registry</a></li>
</ul>

<p><strong>6) Source Control Management:</strong></p>

<p><code class="highlighter-rouge">A version control system, where your code, configs &amp; documents are being stored.</code></p>

<p>Tools:</p>

<ul>
  <li><a href="https://enterprise.github.com/home">Github</a></li>
  <li><a href="https://bitbucket.org/product">Bitbucket</a></li>
  <li><a href="https://about.gitlab.com/products/">GitLab</a></li>
  <li><a href="https://www.collab.net/downloads/subversion">SVN</a></li>
</ul>

<p><strong>7) Persistant Storage:</strong></p>

<p><code class="highlighter-rouge">Place to store all your app data. A software-defined storage (SDS)</code></p>

<p>Tools:</p>

<ul>
  <li>
    <p>Object Storage</p>

    <ul>
      <li><a href="https://aws.amazon.com/s3/">AWS S3</a></li>
      <li><a href="https://docs.openstack.org/developer/swift/">Openstack Swift</a></li>
      <li><a href="https://cloud.google.com/storage/">Google Unified Object Storage</a></li>
    </ul>
  </li>
  <li>
    <p>Block Storage</p>

    <ul>
      <li><a href="https://aws.amazon.com/ebs/">AWS EBS</a></li>
      <li><a href="https://docs.openstack.org/kilo/config-reference/content/section_block-storage-overview.html">Openstack Cinder</a></li>
      <li><a href="https://cloud.google.com/compute/docs/disks/">GCE Persistent Disk</a></li>
    </ul>
  </li>
</ul>

<p>Data is mission critical &amp; storage technologies in container world, to support stateful services, are yet to be matured.</p>

<p>You may want to continue with your traditional storage solution until world settles for stateful containers.</p>

<p><strong>8) Security solutions:</strong></p>

<p><code class="highlighter-rouge">Enforce security policies, manage secrets, security scanning, image signing.</code></p>

<p>Tools:</p>

<ul>
  <li><a href="https://docs.docker.com/engine/security/trust/content_trust/">Docker Content Trust</a></li>
  <li><a href="https://www.aquasec.com/">Aqua</a></li>
  <li><a href="https://www.twistlock.com/">Twistlock</a></li>
  <li>
    <p><a href="https://www.weave.works/">Weaveworks</a></p>
  </li>
  <li>
    <p><a href="https://www.jfrog.com/confluence/display/XRAY">JFrog Xray</a></p>
  </li>
  <li><a href="https://www.vaultproject.io/">Vault</a></li>
</ul>

<p><strong>9) Load balancer:</strong></p>

<p><code class="highlighter-rouge">To manage &amp; distribute your external traffic.</code></p>

<p>Tools:</p>

<ul>
  <li><a href="https://www.nginx.com/resources/admin-guide/load-balancer/">Ngnix</a></li>
  <li><a href="http://www.haproxy.org/">HAProxy</a></li>
  <li><a href="https://avinetworks.com/">AVI Networks</a></li>
  <li><a href="https://www.incapsula.com/load-balancer.html">Incapsula</a></li>
  <li><a href="https://www.citrix.com/products/netscaler-adc/">Citrix Netscaler</a></li>
  <li>
    <p><a href="http://dyn.com/">Dyn</a></p>
  </li>
  <li><a href="https://aws.amazon.com/elasticloadbalancing/">AWS ELB</a></li>
</ul>

<p><strong>10) Monitoring:</strong></p>

<p><code class="highlighter-rouge">Log management, Metrics collection, time-series monitoring, analytics &amp; visualisation &amp; alerting</code></p>

<p>Tools:</p>

<ul>
  <li><a href="https://www.splunk.com/">Splunk</a></li>
  <li><a href="https://www.elastic.co/products">Elastic Stack</a></li>
  <li><a href="https://www.sysdig.org/">Sysdig</a></li>
  <li><a href="https://prometheus.io/">Prometheus</a></li>
  <li>Others (<a href="https://github.com/google/cadvisor">cAdvisor</a>, <a href="http://www.fluentd.org/">Fluentd</a>, <a href="https://github.com/kubernetes/heapster">Heapster</a>, <a href="https://grafana.com/">Grafana</a> etc.)</li>
</ul>

<p><strong>11) Authentication &amp; authorisation:</strong></p>

<p><code class="highlighter-rouge">Policy compliance, role based access control (RBAC), app to app communication</code></p>

<p>Tools:</p>

<ul>
  <li><a href="https://www.ldap.com/choosing-an-ldap-server">Lightweight Directory Access Protocol (LDAP)</a></li>
  <li><a href="">Service Accounts</a></li>
  <li><a href="https://docs.microsoft.com/en-us/azure/active-directory/">MS Azure Active Directory</a></li>
  <li><a href="https://aws.amazon.com/iam/">AWS IAM</a></li>
</ul>

<p><strong>12) Continuous Integration:</strong></p>

<p><code class="highlighter-rouge">Developers to integrate code into a shared repository &amp; verified by an automated build, allowing teams to detect problems early</code></p>

<p>Tools:</p>

<ul>
  <li><a href="https://jenkins.io/">Jenkins</a></li>
  <li><a href="https://www.atlassian.com/software/bamboo">Bamboo</a></li>
  <li><a href="https://circleci.com/">CircleCI</a></li>
  <li><a href="https://travis-ci.org/">Travis CI</a></li>
  <li><a href="http://cruisecontrol.sourceforge.net/">CruiseControl</a></li>
  <li><a href="http://www.jetbrains.com/teamcity/">TeamCity</a></li>
</ul>

<p><strong>13) Continuous Delivery:</strong></p>

<p><code class="highlighter-rouge">Release into production of application that passes the automated tests, after necessary approvals</code></p>

<p>Tools:</p>

<ul>
  <li><a href="https://www.chef.io/chef/">Chef</a> / <a href="https://puppet.com/">Puppet</a> / <a href="https://www.ansible.com/">Ansible</a></li>
  <li><a href="https://www.terraform.io/">Terraform</a> &amp; <a href="https://www.packer.io/">Packer</a></li>
  <li><a href="https://cfengine.com/">CFEngine</a></li>
  <li><a href="https://saltstack.com/">SaltStack</a></li>
  <li><a href="https://developer.ibm.com/urbancode/products/urbancode-deploy/">IBM UrbanCode Deploy</a></li>
</ul>

<p><strong>14) Collaboration:</strong></p>

<p><code class="highlighter-rouge">Brings all the pieces (system alerts, notification etc.) and people/teams you need together. Enables ChatOps.</code></p>

<p>Tools:</p>

<ul>
  <li><a href="https://slack.com/">Slack</a></li>
  <li><a href="https://www.hipchat.com/">HipChat</a></li>
  <li><a href="https://products.office.com/en-in/yammer/yammer-overview">Yammer</a></li>
  <li><a href="https://gitter.im/">Gitter</a></li>
</ul>

<h3 id="hummm-anything-else-they-should-be-integrated-with">Hummm… anything else they should be integrated with…</h3>

<p>Probably also with -</p>

<p><strong>15) Cloud provider services</strong></p>

<p><strong>16) Billing system</strong></p>

<p><strong>17) Auditing system</strong></p>

<p>Phew! That’s exhaustive list!</p>

<h3 id="anything-container-management-framework-cant-do-or-will-not-do">Anything container management framework can’t do or will not do?</h3>

<p>Yes …</p>

<ul>
  <li>
    <p><strong>Infrastructure Management:</strong></p>

    <p><code class="highlighter-rouge">Infrastructure (computing, network &amp; storage) provisioning, scaling up / down, upgrading / rollback / security fixes.</code></p>
  </li>
  <li>
    <p><strong>Manage itself</strong> (Container Management Framework):</p>

    <p><code class="highlighter-rouge">Install / bootstrap, upgrade / rollback / security fixes, disaster recovery of container management framework itself.</code></p>
  </li>
</ul>

<h3 id="whaaat--then-how-am-i-gonna-get-those-things-done">WHAAAT !!? Then… how am I gonna get those things done?</h3>

<p>That is out of scope of container management. You should have cloud infrastructure.</p>

<p>Use infrastructure provisioning tool to provision your infrastructure &amp; use some configuration management tool to setup your container management framework.</p>

<p>Don’t forget to have disaster recovery plan in place.</p>

<h3 id="can-you-give-your-recommendations-on-container-management-frameworks">Can you give your recommendations on container management frameworks?</h3>

<p>Recommendations!? No! I can’t &amp; I should not. one size doesn’t fit all.</p>

<p>But I can suggest you how to reach on your decision to choose one.</p>

<ul>
  <li>
    <p>First choose a cloud provider (public / private).</p>
  </li>
  <li>
    <p>Decide on what cloud services you are gonna use to build infrastructure (VMs / bare metal).</p>
  </li>
  <li>
    <p>Make a checklist (based on your need) as listed above in this post &amp; see which Container Management Framework best suited to you.</p>
  </li>
  <li>
    <p>Choose tools which will help you to create infrastructure, deploy container management framework &amp; upgrade / patch it.</p>
  </li>
  <li>
    <p>Don’t forget to adopt DevOps tools &amp; principles for your apps. Check <a href="//blog.ashishapy.com/2015/06/devops-an-introduction-with-automation-tools/">DevOps - An Introduction</a>.</p>
  </li>
</ul>

<p>I would love to listen your feedback.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Self-Healing Systems using Docker</title>
	  <link>//2016/09/self-healing-system-using-docker/</link>
	  <author>Ashish Pandey</author>
	  <pubDate>2016-09-18T06:00:00+00:00</pubDate>
	  <guid>//2016/09/self-healing-system-using-docker/</guid>
	  <description><![CDATA[
	     <p>Imagine world where IT / Software systems do not require manual intervention to manage itself. Systems are self-sufficient. In case of disaster, systems are able to recover itself &amp; resume services. Systems are able to detect what is not working, then <em>self-heal / auto-heal / restore</em> itself to <strong>designed state</strong>.</p>

<p>If some part of system can’t be auto repaired then system should also be able to detect it, work as a <strong>circuit breaker</strong> to isolate defective part of the system. Also make sure that rest of the system don’t get impacted and operate as normal.</p>

<p>Self-Healing Microservices Systems are a big step towards building such systems.</p>

<p><em>There are three levels of self-healing systems.</em></p>

<ol>
  <li>
    <p><strong>Application Level:</strong></p>

    <p>We capture problem either through exception or through logs. It is upto developers of each service to design in such a way that it can heal itself or recover from failure. Implementation of DevOps practices or Continuous Deployment process would be great help in the direction.</p>
  </li>
  <li>
    <p><strong>System Level:</strong></p>

    <p>Systems are monitored through aspect of process failure and response time. If process fails, we need to restart the service or redeploy the service. If response time is not acceptable then we need to scale / descale the service.</p>
  </li>
  <li>
    <p><strong>Hardware Level:</strong></p>

    <p>Hard truth, we can’t self-heal hardware in case of hardware failure. We can redeploy the services to a healthy hardware / node. Or we keep monitoring the hardware and take preventive measure to scale hardware / infrastructure.</p>
  </li>
</ol>

<blockquote>
  <p>Microservices architecture, Container technologies and modern cloud (public/private) infrastructure are making possible to create Self-Healing systems.</p>
</blockquote>

<p>Here is the slides &amp; YouTube video from my recent talk on <a href="http://www.meetup.com/WebApp-Pune/events/233785424/">Self-Healing Microservices using Docker</a> (1.12.x) with <a href="http://www.meetup.com/WebApp-Pune/">WebApp-Pune meetup</a>.</p>

<p><strong>Slides:</strong></p>

<iframe src="//slides.com/ashishapy/self-healing-systems/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>

<p><strong>Youtube:</strong></p>

<p>If you just want to see Self-Healing demo and don’t have enough patient to watch full meetup event video. then jump to 1hr 26mins time or follow this YouTube link <strong><a href="https://youtu.be/eV3Ltw1qjNo?t=1h26m">Self-healing Demo</a></strong>.</p>

<p>The full video:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/eV3Ltw1qjNo" frameborder="0" allowfullscreen=""></iframe>

<p>It covers a lot of details including The 12 Factor Apps, Self-Healing, Docker, Microservices and Demo of Self-Healing Systems using Docker swarm mode.</p>

<p>Let me know your feedback or any question you have. Use comment section below or Twitter <a href="https://twitter.com/ashishapy">@ashishapy</a>.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Git (Source Code Management) - Strategy & Solution</title>
	  <link>//2016/09/git-source-code-management-system/</link>
	  <author>Ashish Pandey</author>
	  <pubDate>2016-09-16T10:00:00+00:00</pubDate>
	  <guid>//2016/09/git-source-code-management-system/</guid>
	  <description><![CDATA[
	     <p>It’s been long time, I haven’t posted anything on the blog. Though I have been engaged through meet ups with technical communities in Pune. It always excites me to explore new (which I never explored before) and go back to community and share my experience and knowledge.</p>

<p>This leads me and bring sense of responsibility, even when I am learning / exploring for myself. This has been a great advantage.</p>

<p>Recently I gave talk on <strong><a href="https://www.meetup.com/WebApp-Pune/events/231014541/">Git: SCM - Strategy &amp; Solution</a></strong> with <a href="https://www.meetup.com/WebApp-Pune/">WebApp-Pune meetup</a> event hosted at ThoughtWorks Pune. ThoughtWorks has always been generous to host such events, which has been catalyst for developer community to grow.</p>

<p>I have been using Git with Github/Bitbucket/GitLab for several years. But when I was asked by my colleagues including seniors/juniors about Git. I realised that power &amp; advantage of Git (or any other Source Code Management system) are not known / utilised by many. So I decided to give talk on “Git: SCM - Strategy &amp; Solution”.</p>

<p>Below is the slides from the talk.</p>

<p><strong>Slides:</strong></p>

<iframe src="//slides.com/ashishapy/git-scm/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>

<p>It goes in detail about Git, Git commands, Git workflows, Collaboration, Branching strategy, Git in DevOps &amp; some bonus Github features.</p>

<p>Let me know your feedback or any question you have. Use comment section below or Twitter <a href="https://twitter.com/ashishapy">@ashishapy</a>.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Docker Ecosystem for Microservices</title>
	  <link>//2016/04/docker-ecosystem-for-microservice-cluster/</link>
	  <author>Ashish Pandey</author>
	  <pubDate>2016-04-17T10:00:23+00:00</pubDate>
	  <guid>//2016/04/docker-ecosystem-for-microservice-cluster/</guid>
	  <description><![CDATA[
	     <p>In previous post <a href="/2016/03/docker-with-devops/">Docker with DevOps - One step towards Microservices</a>, we talked about Microservices and how Docker with fully automated DevOps workflow helped building a microservice. The talk included hands-on Docker basics and building Automated workflow (CI / CD).</p>

<p>In the quest to deploy <strong>often and fast</strong>, be <strong>fully automatic</strong>, accomplish <strong>zero-downtime</strong>, have the <strong>ability to rollback</strong>, provide constant <strong>reliability</strong> across environments, be able to <strong>scale effortlessly</strong>, and create <strong>self-healing systems</strong> able to recuperate from failures. We derive many strategies, architecture and tools.</p>

<p>By adopting culture of Automation / DevOps, we can deliver product / software very often and fully automatic way. But having zero-downtime was challenge. <strong>Blue-Green deployment strategy</strong> is the way to deploy new version of micro-service without any down time. Blue-Green deployment strategy also gives you ability to test the new version against real production traffic and if something goes wrong, you have previous version available and you can always switch back to previous stable version of micro-service.</p>

<p>With micro-services, you get hell lots of moving parts of application. Of-course Docker helps in creating standard package for micro-services, so that we can have standardise way to handle micro-services, irrespective of technology used to build micro-services.</p>

<p>Let’s call collection of all moving parts (containers) of application a <strong>Cluster</strong> . Creating / managing cluster needs some tooling to make our task easy. Before we go further let’s see <strong>Self-Healing micro-services architecture</strong> as below.</p>

<p><img src="/assets/images/self_healing_ms.jpg" alt="Self-Healing Architecture" /></p>

<p>As part of hands-on / demo, I created a GitHub repo <a href="https://github.com/ashishapy/demo-microservices-v1">Demo-MicroServices</a>. It has steps to create a cluster using <strong>Consul</strong> as service discovery, <strong>Registrator</strong> and <strong>Docker Swarm</strong> as cluster orchestrator. The repo has few steps, how to test if cluster is working as <strong>single view</strong>.</p>

<p>In the continuation of the same, We dig deeper in the recent meet-up event at Capita, Pune. Go thorugh slides, I hope you will find many intersting things to discover.</p>

<p><strong>Slides:</strong></p>

<iframe src="//slides.com/ashishapy/docker-microservices/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>

<p>It goes in detail about Docker ecosystem for Microservices. If you have any question, shoot me either through my Twitter handle or email me. I will be more than happy to respond.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Docker with DevOps - One step towards Microservices</title>
	  <link>//2016/03/docker-with-devops/</link>
	  <author>Ashish Pandey</author>
	  <pubDate>2016-03-26T10:00:23+00:00</pubDate>
	  <guid>//2016/03/docker-with-devops/</guid>
	  <description><![CDATA[
	     <p>Microservices are slowly becoming the preferred way to build big, easy to maintain and highly scalable systems thanks to tools like <strong>Docker</strong>, CoreOS, etcd, Consul, Fleet, Mesos, Rocket, and others. Due to the goals today’s competition sets in front of us (flexibility, speed, and so on), microservices are probably the best type of architecture we can apply.</p>

<p>It’s a quest to deploy <strong>often and fast</strong>, be <strong>fully automatic</strong>, accomplish <strong>zero-downtime</strong>, have the <strong>ability to rollback</strong>, provide constant <strong>reliability</strong> across environments, be able to <strong>scale effortlessly</strong>, and create <strong>self-healing systems</strong> able to recuperate from failures.</p>

<p>Before containers became common, microservices were painful to deploy. On the other hand, monolithic applications are relatively simple to handle.</p>

<p><strong><a href="https://www.docker.com/">Docker</a></strong> made it possible to work with containers without suffering in the process. They made containers accessible and easy to use to everyone.</p>

<p>Docker allows you to package an application with all of its dependencies into a standardised unit for software development, code, runtime, system tools, system libraries – anything you can install on a server. By encapsulating and isolating everything in a container, this guarantees that the container will always run the same, regardless of the environment it is running in.</p>

<p>One can have DevOps Continuous Integration (CI), Continuous Delivery / Deployment (CD) and leverage Docker ecosystem to deliver <strong>often and fast</strong>, be <strong>fully automatic</strong>, accomplish <strong>zero-downtime</strong>, have the <strong>ability to rollback</strong> software products.</p>

<p>A reference of automated workflow below:</p>

<p><img src="/assets/images/DevOps-Automated-Workflow.jpg" alt="DevOps-Automated-Workflow" /></p>

<hr />
<p>I had organised a meet up event for learning ‘Docker with DevOps - One step towards Microservices’ with hands-on. It was great success in terms of learning and having intellectual discussion around Docker, DevOps and Microservices.</p>

<p>Slides and Youtube recording are below:</p>

<p><strong>Slides:</strong></p>

<iframe src="//slides.com/ashishapy/dockerwithdevops/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>

<p><strong>Youtube:</strong></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/-XPwp2v7HMo" frameborder="0" allowfullscreen=""></iframe>

<p>If you interested to explore about Microservices, check book “Building Microservices” by ‘Sam Newman’. Also check <a href="https://leanpub.com/the-devops-2-toolkit">the-devops-2-toolkit</a> for DevOps and tool kits.</p>

<p>Hope this will help you to have intellectual discussion around Microservices architecture. You can always reach me on my Twitter account or email me.</p>

	  ]]></description>
	</item>

	<item>
	  <title>2/2 Free and secure static website or blog</title>
	  <link>//2016/03/custom-domain-githubpage-cloudflare/</link>
	  <author>Ashish Pandey</author>
	  <pubDate>2016-03-20T10:00:23+00:00</pubDate>
	  <guid>//2016/03/custom-domain-githubpage-cloudflare/</guid>
	  <description><![CDATA[
	     <p>In the previous post, we hosted a static site using <a href="http://jekyllrb.com/">Jekyll</a> on <a href="https://github.com">GitHub</a>.
Which can be browsed on <font color="green">username.github.io</font>.</p>

<p><strong>Previous</strong>:</p>

<p><a href="/2016/02/github-pages-and-cloudflare-free-secure-site/">1/2 Free and secure static website or blog</a></p>

<hr />

<p>In this post we will configure your custom domain, as a secured website. Assuming you have already bought a domain from any domain provider.</p>

<p><strong>Synopsis:</strong></p>

<p><strong>Part 2:</strong></p>

<ol>
  <li>Setup your domain on Cloudflare</li>
  <li>Set Cloudflare DNS server in your domain provider</li>
  <li>Add CNAME file on GitHub repo</li>
  <li>Verify your website / blog</li>
</ol>

<hr />

<p>Without wasting any more time, let’s get going.</p>

<p><strong>1. Setup your domain on Cloudflare</strong></p>

<div class="highlighter-rouge"><pre class="highlight"><code>1.1 Sign up on [CloudFlare](https://www.cloudflare.com/a/sign-up).

1.2 Add [a site](https://www.cloudflare.com/a/add-site) then click Begin Scan.

1.3 It would take few mins to scan, click on 'Continue Setup'.

1.4 It would show you all DNS setup for you. You may choose default settings and click 'Continue'.

1.5 Select a CloudFlare Plan. Let's select Free Website for free &amp; basic plan. click 'Continue'.

1.6 You would see screen 'Change Your Nameservers'. Note down value of 'Change Nameservers to', probably there would be two.
</code></pre>
</div>

<p><strong>2. Set Cloudflare DNS server in your domain provider</strong></p>

<div class="highlighter-rouge"><pre class="highlight"><code>2.1 Login to your domain provider (e.g. GoDaddy, cheapnames, speedhost etc.) from you bought domain name.

2.2 Go to domain DNS settings, you have to figure out where you would find DNS settings, with your domain provider.

2.3 Change 'Nameservers' value to values you noted down from *step 1.6*. Please be informed that it would transfer the control of your site to Cloudflare and you can control DNS setting from Cloudflare now onwards.

2.4 Now wait. The change might take few hours to 48 hours to take effect. You can always go to Cloudflare and check for status 'Active'.
</code></pre>
</div>

<p><strong>3. Add CNAME file on GitHub repo</strong></p>

<div class="highlighter-rouge"><pre class="highlight"><code>3.1 Create a file named CNAME on root directory of repo.

3.2 Put your domain name in format mydomain.com or www.mydomain.com. Check this link (https://help.github.com/articles/using-a-custom-domain-with-github-pages/) for more details and options.
</code></pre>
</div>

<p><strong>4. Verify your website / blog</strong></p>

<div class="highlighter-rouge"><pre class="highlight"><code>Open your browser and enter your domain address. It should be working like charm!
</code></pre>
</div>

<p>These above are few simple steps and you can get free &amp; secure website / blog.</p>

<p>I would recommend to go to Cloudflare settings for your site and make change to improve performance &amp; security of your site.</p>

<p>Please feel free to write me, if you want any help setting up your site.</p>

	  ]]></description>
	</item>

	<item>
	  <title>1/2 Free and secure static website or blog</title>
	  <link>//2016/02/github-pages-and-cloudflare-free-secure-site/</link>
	  <author>Ashish Pandey</author>
	  <pubDate>2016-02-21T10:00:23+00:00</pubDate>
	  <guid>//2016/02/github-pages-and-cloudflare-free-secure-site/</guid>
	  <description><![CDATA[
	     <p>If you are individual / small company and want to host your own website / blog. But you don’t want hassle to 
maintain your hosting site and looking for some simple &amp; easy way to start. Then Github pages is the one you much check.</p>

<p>GitHub Pages, hosted directly from your GitHub repository. Just edit, push, and your website / blog is live. GitHub Pages are powered by <a href="http://jekyllrb.com/">Jekyll</a>.
<a href="http://octopress.org/">Octopress</a> is also another way to Jekyll based framework for same purpose.</p>

<p><a href="https://www.cloudflare.com">Cloudflare</a> gives security to your website / blog including SSL certificates.</p>

<p>Though I like <a href="https://github.com/TryGhost/Ghost">Ghost</a>. You should also check, if you are trying to start a blogging business.</p>

<p><strong>Synopsis:</strong></p>

<p><strong>Part 1:</strong></p>

<ol>
  <li>Setup GitHub Page on your GitHub repo</li>
  <li>Setup Jekyll on your local</li>
  <li>Setup a Jekyll theme</li>
  <li>Push local changes to GitHub repo &amp; Test</li>
</ol>

<hr />

<p>Wohoo! Let’s start. There are few simple steps to get your website / blog ready.</p>

<ol>
  <li>Signup on <a href="https://github.com/">GitHub</a></li>
  <li>
    <p><a href="https://github.com/new">Create a repository</a>: 
Create a new repository named <em><code class="highlighter-rouge">username.github.io</code></em>, <font color="blue">where <strong>'username'</strong> is your username (or organisation name) on GitHub.</font></p>
  </li>
  <li>Install Jekyll on your local machine <code class="highlighter-rouge">gem install jekyll</code>.</li>
  <li>Choose a Jekyll theme and download, unzip it on your local (I choose a blog theme 
<a href="http://jekyllthemes.org/themes/jekyll-uno/">Jekyll Uno</a>)</li>
  <li>
    <p>Go to folder and follow instruction to install dependencies.</p>

    <p><code>$ cd jekyll-uno/</code> <br />
 <code>$ gem install bundler</code>  <br />
 <code>$ bundle install</code> <br /></p>
  </li>
  <li>
    <p>Open “_config.yml” file in any text editor and make changes for your own website. e.g. You should change below things to personalise it at-least</p>

    <pre>
 title: 'Your Blog title'
 description: 'Blog description'
 url: 'blog url'
 baseurl: '/'

 author:
   name: 'Your name'
   email: your email id
   twitter_username: username
   github_username:  username
 </pre>
  </li>
  <li>
    <p>Run local server <code class="highlighter-rouge">$ bundle exec jekyll serve</code>. Go to ‘http://localhost:4000/’ and 
see your changes on browser.</p>
  </li>
  <li>
    <p>Check sample post under ‘_post’ directory. You must use File naming format. 
Check <a href="http://jekyllrb.com/docs/home/">Jekyll Doc</a> to build &amp; customise your blog / website.</p>
  </li>
  <li>
    <p>Now it’s time to push your blog to github.</p>

    <p><code>$ git init</code> <br />
 <code>$ git add -A</code> <br />
 <code>$ git commit -m "first commit"</code> <br />
 <code>$ git remote add origin git@github.com:username/username.github.io.git</code> <br />
 Use your github repo here. <br />
 <code>$ git push -u origin master</code></p>
  </li>
  <li>Let’s test, go to ‘http://username.github.io’ on browser. Yeeeee! That’s our first free blog 
serving over Github Pages.</li>
</ol>

<p>This is the point where you choose either you want your own custom domain name or ‘username.github.io’ url works for you.
There are way to enable https:// on your ‘username.github.io’ page. Check Eric Mill post <a href="https://konklone.com/post/github-pages-now-sorta-supports-https-so-use-it">here</a>.</p>

<p>In the <strong><a href="/2016/03/custom-domain-githubpage-cloudflare/">next post</a></strong> we will go through how to setup custom domain on github pages and DNS setting, security on Cloudflare.</p>

<p><br /></p>

	  ]]></description>
	</item>

	<item>
	  <title>MeteorJS: Quickest way to MVP your idea!</title>
	  <link>//2016/02/meteorjs-quickest-way-to-mvp-your-idea/</link>
	  <author>Ashish Pandey</author>
	  <pubDate>2016-02-16T01:45:23+00:00</pubDate>
	  <guid>//2016/02/meteorjs-quickest-way-to-mvp-your-idea/</guid>
	  <description><![CDATA[
	     <p>This is the era of entrepreneurs and startups. With the launch of #StartUpIndia #StandUpIndia policies by 
PM Modi, now India is more friendly for start-ups. Not only Gov policies, even technology made so easy 
to execute your ideas. Cheaper and easy access to technologies made it possible to dream big and execute 
your idea.</p>

<p>The success rate of start-ups is significantly low and I believe this is what makes this world so exciting. 
We have started embracing failures, it is not like we should fail in implementing / executing our idea. 
But we should not be afraid of failures in the path.</p>

<p>How to get our idea turn into successful product / organisation? It all start with <strong><em>prototyping</em></strong> your idea 
or creating a <strong><em>MVP (Minimum Viable Product)</em></strong>. Either your idea is related to software world or not but you 
need a software system to showcase your prototype / MVP.</p>

<p>Now you get me where I am heading to… <a href="https://www.meteor.com/" target="_blank">Meteor</a> is the framework for you to quickly develop your idea and 
showcase to the world. To use Meteor all you need to know JavaScript , HTML &amp; CSS. These technologies 
are the most used in the IT industry so it won’t be difficult either learn or get developers.</p>

<p>Meteor is easy to learn and get started. Once you are familiar with Meteor ecosystem then it is just 
matter of few weeks to get you MVP ready.</p>

<p>Recently I have presented the journey of one’s idea till execution in one of the meet-ups. It’s great talk on developing and showcasing your idea.</p>

<p><strong>Slides:</strong></p>

<script async="" class="speakerdeck-embed" data-id="f6712c3742394af8812fa7c7b1e619da" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<p><strong>YouTube:</strong></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/z9G1u-ZfUl0" frameborder="0" allowfullscreen=""></iframe>

<p>I was not well during presentation, this is my excuse to speak slowly (You may want to speed up the player) :) .</p>

	  ]]></description>
	</item>

	<item>
	  <title>DevOps: An Introduction with Automation Tools</title>
	  <link>//2015/06/devops-an-introduction-with-automation-tools/</link>
	  <author>Ashish Pandey</author>
	  <pubDate>2015-06-20T15:03:00+00:00</pubDate>
	  <guid>//2015/06/devops-an-introduction-with-automation-tools/</guid>
	  <description><![CDATA[
	     <p>I have been hearing about DevOps a lot and I thought to check it out, what is this new bird. I am tempted to try out at least one tool in each of its categories. If you like it, do leave your comment.</p>

<p>==If you are interested only in list of DevOps Tools then jump to <a href="#automate">Step 2: Automate</a> of the post.==</p>

<p>First question was in my mind. <strong>What is DevOps?</strong></p>

<p>DevOps (Development and Operations) is software development method, an improvement upon Agile and Lean.</p>

<p>Ok, we know the definition now. <strong>Why do we bother to learn another software development method?</strong></p>

<p>It’s just a name ‘DevOps’. If you already have</p>

<ul>
  <li>Great culture (transparency, collaboration, shared responsibilities and  free flow of knowledge) with in team and across teams.</li>
  <li>Most of the task are automated</li>
  <li>Great Monitoring to give instant feedback</li>
  <li>Instant delivery of production ready softwares / Fast IT.</li>
  <li>Incremental value addition to business</li>
</ul>

<p>Then you are already on DevOps and please educate others to be awesome, as you are.</p>

<p>Hummm… <strong>I am not on DevOps.</strong>
Okay, let’s make transition to DevOps. 
I must warn you!!! Once you make transition to DevOps then there is no turning back. It’s like full HD TV, once you experienced it, you never wanna go back to standard TV :) .</p>

<p>Transition to DevOps is <strong>simple two step process</strong>.</p>

<p>Step 1: Re-org with cultural changes
Step 2: Automate</p>

<p>Thank you!!!</p>

<p>Still reading? DevOps must has got your attention ;) 
Ok, ok, without wasting any more time, we jump to two step process.</p>

<p>Step 1: <strong>Re-org with cultural changes</strong>
DevOps is not about hiring new people but it is re-org of your existing team with cultural changes.</p>

<p>You might have organisation structure as below, divided by their roles and skills.</p>

<p><img src="//cdn.ashishapy.com/2015/Jun/1do-1434693207495.jpg" alt="Typical organisation structure" /></p>

<ul>
  <li>Re-org to have every stakeholder a common Goal, shared vision. Get a clear vision and have team around services. You maintain services over decades, not a project. Ultimately goal of project is also a service.</li>
</ul>

<p><img src="//cdn.ashishapy.com/2015/Jun/2do-1434695018246.jpg" alt="team around services" /></p>

<p>Address wastes &amp; objections within team and encourage to have a shared vision.</p>

<ul>
  <li>
    <p>Eliminate wastes like knowledge waste, waiting waste, waste in motion and inventory waste.</p>
  </li>
  <li>
    <p>Address objections like security, compliance, offshore team, legacy and skills.</p>
  </li>
  <li>
    <p>Bring transparency within the team and let free flow of knowledge at every level.</p>
  </li>
</ul>

<p><strong>What about automation?</strong> do automation will help in building a DevOps team &amp; cultural changes?</p>

<p>==<span id="automate">Step 2: <strong>Automate</strong></span>==</p>

<p>Yes, tools are integral part of DevOps. Tools help to automate things and bring DevOps culture in the team.</p>

<p><strong>Categories of DevOps tool</strong>
<img src="//cdn.ashishapy.com/2015/Jun/3do1-1434742664868.jpg" alt="Categories of DevOps" /></p>

<p>List of useful tools for each categories:</p>

<p><strong>1. Collaboration:</strong></p>

<p>Tools:</p>

<ul>
  <li><a href="http://www.skype.com">Skype</a></li>
  <li><a href="https://slack.com">Slack</a></li>
  <li><a href="https://github.com">Github Wiki</a></li>
  <li>Blogs</li>
</ul>

<p>Benefits:</p>

<ul>
  <li>To easily connect with across teams.</li>
  <li>Helps in rapid discussion to make decision fast.</li>
  <li>Pass knowledge across team.</li>
  <li>Helps to avoid knowledge waste.</li>
  <li>Acts as knowledge repository.</li>
  <li>Quick collaboration.</li>
</ul>

<p><strong>2. Planning:</strong></p>

<p>Tools:</p>

<ul>
  <li><a href="http://trello.com">Trello</a></li>
  <li><a href="http://visualstudio.com">Visual Studio Online</a></li>
</ul>

<p>Benefits:</p>

<ul>
  <li>Collective team planning.</li>
  <li>Bring transparency.</li>
  <li>Bring everybody online onboard.</li>
  <li>Visibility to everybody, what others are working on. Who to contact when needed &amp; who are responsible for what.</li>
  <li>Define priorities in real time.</li>
</ul>

<p><strong>3. Issue Tracking:</strong></p>

<p>Tools:</p>

<ul>
  <li><a href="http://www.zendesk.com">Zendesk</a></li>
  <li><a href="https://www.atlassian.com/software/jira">Jira</a></li>
</ul>

<p>Benefits:</p>

<ul>
  <li>Know how I am doing to collect triage and response as collective team.</li>
  <li>Not to do transportation waste as with multiple tracking system.</li>
  <li>Eliminate transportation waste, knowledge waste as information continues to degrade as information travels through systems.</li>
  <li>Have a shared view, everybody is looking at same place and solving problem (not passing around).</li>
</ul>

<p><strong>4. Monitoring:</strong></p>

<p>Tools:</p>

<ul>
  <li><a href="http://logstash.net">Logstash</a></li>
  <li><a href="http://www.microsoft.com/sam/en/us/systemcenter.aspx">Microsoft System Center</a></li>
  <li><a href="http://rashidkpc.github.io/Kibana">Kibana</a></li>
  <li><a href="http://newrelic.com">New Relic</a></li>
  <li><a href="https://www.nagios.org/">Nagios</a></li>
  <li><a href="https://sensuapp.org/">Sensu</a></li>
  <li><a href="http://www.zabbix.com/">Zabbix</a></li>
</ul>

<p>Benefits:</p>

<ul>
  <li>Health Check of systems.</li>
  <li>System Alerts.</li>
  <li>Helps in maintenance &amp; deployment.</li>
  <li>Helps in designing systems and future improvements.</li>
  <li>To know when is the right time to bring in right person to troubleshoot the problem.</li>
  <li>Collecting, parsing and analysing system logs.</li>
</ul>

<p><strong>5. Configuration Management:</strong></p>

<p>Tools:</p>

<ul>
  <li><a href="http://www.getchef.com">Chef</a></li>
  <li><a href="http://www.saltstack.com">SaltStack</a></li>
  <li><a href="http://puppetlabs.com">Puppet</a></li>
  <li><a href="http://www.ansible.com">Ansible</a></li>
  <li><a href="http://technet.microsoft.com/en-us/library/dn249912.aspx">Powershell DSC</a></li>
</ul>

<p>Benefits:</p>

<ul>
  <li>Keep configuration stable and consistent, when moves from one server to another.</li>
  <li>Infrastructure management as code.</li>
  <li>Changes to one server applied to all server automatically.</li>
</ul>

<p><strong>6. Source Control:</strong></p>

<p>Tools:</p>

<ul>
  <li><a href="https://github.com">Github</a></li>
  <li><a href="https://bitbucket.org/">Bitbucket</a></li>
  <li><a href="https://subversion.apache.org/">Subversion</a></li>
  <li><a href="https://www.atlassian.com/software/stash">Stash</a></li>
</ul>

<p>Benefits:</p>

<ul>
  <li>Closely guard your software assets.</li>
  <li>Track changes with audit control.</li>
  <li>Store configuration along with code. Infrastructure as code.</li>
  <li>More control over changes in as infrastructure.</li>
  <li>Easy to troubleshoot issue when something go wrong.</li>
</ul>

<p><strong>7. Development Environment:</strong></p>

<p>Tools:</p>

<ul>
  <li><a href="https://codenvy.com">Codenvy</a></li>
  <li><a href="http://www.vagrantup.com">Vagrant</a></li>
</ul>

<p>Benefits:</p>

<ul>
  <li>Making sure all developers have access to same setup / configuration.</li>
  <li>Eliminate differences between production environment and development environment.</li>
  <li>Browser / cloud based IDE, see real time code change by others.</li>
</ul>

<p><strong>8. Continous Integration:</strong></p>

<p>Tools:</p>

<ul>
  <li><a href="http://www.jetbrains.com/teamcity">Teamcity</a></li>
  <li><a href="http://jenkins-ci.org">Jenkins</a></li>
  <li><a href="https://travis-ci.com">Travis CI</a></li>
  <li><a href="https://www.atlassian.com/software/bamboo">Bamboo</a></li>
  <li><a href="http://cruisecontrol.sourceforge.net/">CruiseControl</a></li>
</ul>

<p>Benefits:</p>

<ul>
  <li>Continuous and very frequent code merge in shared / main repository.</li>
  <li>Changed code gets tested by automated build tools against all integrated systems.</li>
  <li>Detect problem as early as possible.</li>
</ul>

<p><strong>9. Deployment:</strong></p>

<p>Tools:</p>

<ul>
  <li><a href="http://aws.amazon.com/cloudformation">Cloudformation</a></li>
  <li><a href="http://www.packer.io">Packer</a></li>
  <li><a href="http://www.docker.com">Docker</a></li>
  <li><a href="http://octopusdeploy.com">Octopus</a></li>
  <li><a href="http://www.go.cd">Go</a></li>
  <li><a href="http://capistranorb.com/">Capistrano</a></li>
</ul>

<p>Benefits:</p>

<ul>
  <li>Making sure continuous deployment is reliable and less scary.</li>
  <li>Have whole build pipeline and configuration goes to production as a single package.</li>
  <li>Easily autoscale same setup many fold.</li>
  <li>Encourages great cooperation between Developer and Operation.</li>
  <li>You might never update an server but replace it with updated / new code &amp; configuration.</li>
</ul>

<p>Definitely some of tools listed above serve purpose of more than one category. So use your own analysis before choosing a suitable tool for you.</p>

<p>Automation tools help to get code changes from Dev to Prod within few mins. This is the power of DevOps automation.</p>

<p>DevOps is about continuous improvement, so does this post.</p>

<p>Hope you like it, please do leave comments here or discuss over Twitter.</p>

	  ]]></description>
	</item>

	<item>
	  <title>AWS https CloudFront with Free Custom SSL</title>
	  <link>//2015/06/https-aws-cloudfront-with-free-custom-ssl/</link>
	  <author>Ashish Pandey</author>
	  <pubDate>2015-06-13T08:48:15+00:00</pubDate>
	  <guid>//2015/06/https-aws-cloudfront-with-free-custom-ssl/</guid>
	  <description><![CDATA[
	     <p>I wanted to deliver images on my website through a secure CDN (in case of AWS, it is CloudFront) to improve performance of my website.</p>

<hr />
<p><strong>Synopsis:</strong> 
It’s covered in 4 steps.</p>

<ol>
  <li>Get class 1 free SSL from StartSSL</li>
  <li>Upload certificate to aws for CloudFront</li>
  <li>Configure Secure CloudFront to deliver images stored on AWS S3 bucket.</li>
  <li>Setup Route 53 to use cdn subdomain with CloudFront</li>
</ol>

<hr />
<p>But since I have enabled HTTP Strict Transport Security (HSTS) for all my website subdomains.</p>

<p>==add_header Strict-Transport-Security “max-age=31536000; includeSubdomains;”;==</p>

<p>It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol.
After enabling HTTPS my domain is not allowed to serve images over http.</p>

<p><strong>Step 1</strong>: 
Let’s get a free SSL first.
I got SSL for my domain https://ashishapy.com and one sub domain https://www.ashishapy.com for free. Check my other blog <a href="https://blog.ashishapy.com/part-12-get-ssl-certificate-free/">get-ssl-certificate-free</a> to know, how to get it. 
Now I want another subdomain https://cdn.ashishapy.com to be served using SSL. Free SSL allows to add only one subdomain along with root domain.</p>

<p>I had two options
A. Go for costly and exhaustive process to get class 2 SSL to add more than one subdomain.
B. Or Get another Class 1 SSL Free for subdomain cdn.ashishapy.com.</p>

<p>Being an individual blogger, I wanted to go for cheapest option without compromising security. I choose option 2, get it using same process explained <a href="https://blog.ashishapy.com/part-12-get-ssl-certificate-free/">get-ssl-certificate-free</a>. 
I have three files Private Key (cdn_ssl_private.key), Certificate (cdn_ssl.crt) and intermediate CA certificate (sub.class1.server.ca.pem)</p>

<p><strong>Step 2</strong>: 
Upload these files to AWS. You are gonna need AWS command line tool. If you haven’t already installed it then follow <a href="http://docs.aws.amazon.com/cli/latest/userguide/installing.html">AWS cli installtion guide</a>.
you need to associate your Amazon Access key and ID by running 
<code>aws configure</code></p>

<p>Once AWS cli tool configured, upload the certificate to AWS using following command.</p>

<p><code>aws iam upload-server-certificate --server-certificate-name cdnashishpy --certificate-body file://cdn-ssl.crt --private-key file://cdn_ssl_private.key --certificate-chain file://sub.class1.server.ca.pem --path /cloudfront/</code></p>

<p>I named certificate name as ‘cdnashishapy’, please use your own name to recognise easily in future.
The extra –-path /cloudfront/ to let Amazon know we will be using this on CloudFront otherwise certificate won’t show for CloudFront.</p>

<p>Test it, if all is well by running command 
<code>aws iam get-server-certificate --server-certificate-name cdnashishapy</code>
It should return uploaded certificate information.</p>

<p><strong>Step 3</strong>:
Sign in to your AWS account and go to <a href="https://console.aws.amazon.com/cloudfront/home">CloudFront home</a>.
<img src="//cdn.ashishapy.com/2015/Jun/1cf-1434176197004.jpg" alt="CloudFront home" />
Click on ‘Create Distribution’.</p>

<p><img src="//cdn.ashishapy.com/2015/Jun/2cf-1434176975683.jpg" alt="Select Web" />
In ‘Web’ section click on ‘Get Started’ button</p>

<p>In the next screen fill ‘Origin Settings’ &amp; ‘Default Cache Behaviour Settings’ as below screen shot.</p>

<p>Origin Settings:
<img src="//cdn.ashishapy.com/2015/Jun/3cf-1434177785313.jpg" alt="Origin Settings" />
I choose a S3 bucket as origin. This should be your source of content.</p>

<p>Default Cache Behaviour Settings:
<img src="//cdn.ashishapy.com/2015/Jun/4cf-1434178088818.jpg" alt="Default Cache Behaviour Settings" /></p>

<p>Distribution Settings:
Here comes the critical part of the setup.
<img src="//cdn.ashishapy.com/2015/Jun/5cf-1434178922019.jpg" alt="Distribution Settings" /></p>

<p>Price Class: Choose it based on your most users’ geolocation.
Alternate Domain Names (CNAMEs): Give your cdn subdomain name.
SSL Certificate: Select Custom SSL Certificate and choose certificate name from drop down option.</p>

<p>==Custom SSL Client Support: I choose ‘Only Clients that Support Server Name Indication (SNI)’. This option limits the browsers you can serve. Check what browser supports SNI.
Mostly, it’s not supported in IE at all on Windows XP and earlier and Android 2.2 default browser. Still recommended to do your own analysis.==
You can choose ‘All Clients’ but there are charges for that.</p>

<p>Click on ‘Create Distribution’ button to create Secure CloudFront Distribution.
<img src="//cdn.ashishapy.com/2015/Jun/6CF-1434181909661.jpg" alt="CloudFront Distribution" />
This will take 15-20 mins to get status as ‘Enabled’.
Copy ‘Domain Name’ value, you will need it to set up DNS in next step.</p>

<p>You are just one step away from setting up you secure CDN.</p>

<p><strong>Step 4</strong>:
Go to your <a href="https://console.aws.amazon.com/route53/home#hosted-zones:">AWS Route53 Hosted Zones</a>.
Create a Record Set.
<img src="//cdn.ashishapy.com/2015/Jun/6cfr53-1434183046874.jpg" alt="Create a Record Set" />
Paste CloudFront DomainName copied from Step 3 in Value.
Save the record set and wait for couple of mins.</p>

<p>Congratulations! You have successfully created a secure CDN.</p>

<p>Please leave your comments here or discuss on Twitter.</p>

	  ]]></description>
	</item>


</channel>
</rss>
