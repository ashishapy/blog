<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>blog.ashishapy.com</title>
   
   <link>https://blog.ashishapy.com/</link>
   <description>Amused at technology</description>
   <language>en-uk</language>
   <managingEditor> Ashish Pandey</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Container (Docker) Management Framework - An Introduction</title>
	  <link>//2017/07/container-management-framework/</link>
	  <author>Ashish Pandey</author>
	  <pubDate>2017-07-02T06:00:00+00:00</pubDate>
	  <guid>//2017/07/container-management-framework/</guid>
	  <description><![CDATA[
	     <p>In case you haven’t noticed, we are on rapid march towards realising full capacity of cloud infrastructure &amp; its services. Having multi cloud, hybrid infrastructure &amp; avoid vendor locking is the dream!</p>

<p>Building &amp; running your apps in container on cloud is major step towards the dream. Few months back I wrote, presented &amp; talked on <a href="//blog.ashishapy.com/2016/03/docker-with-devops/">Docker with DevOps - One step towards Microservices</a>, <a href="//blog.ashishapy.com/2016/04/docker-ecosystem-for-microservice-cluster/">Docker Ecosystem for Microservices</a> &amp; <a href="//blog.ashishapy.com/2016/09/self-healing-system-using-docker/">Self-Healing Systems using Docker</a>. These blog posts/presentations help you in understanding basics &amp; benefits of cloud, Docker, DevOps.</p>

<p><em>Containers (aka Docker)</em> comes with some benefits &amp; complexities. Your apps in container without <em>container management framework</em>, are like your luxury car without wheels &amp; steering.</p>

<p>This post is series of questions &amp; answers, I ask myself &amp; answer myself. 
Weirdo!</p>

<p>Let’s start . . .</p>

<h3 id="what-is-container-management-framework">What is Container Management Framework?</h3>

<p>A container management framework is a solution used to build, ship &amp; deploy your app in containers. Docker, as a container has become a standard.</p>

<p>Container Management Framework helps you to build <strong><em>CaaS (Container as a Service)</em></strong> solution.</p>

<blockquote>
  <p><strong>Containers as a Service (CaaS)</strong> is a model where IT organisations and developers can work together to build, ship and run their applications anywhere. CaaS enables an IT secured and managed application environment consisting of content and infrastructure, from which developers are able build and deploy applications in a self service manner.
- <a href="https://blog.docker.com/2016/02/containers-as-a-service-caas/">Docker</a></p>
</blockquote>

<h3 id="are-they-different-from-container-orchestrator-tool">Are they different from Container Orchestrator tool?</h3>

<p>Yes…
Orchestration is just a piece of the puzzle, but choice of the orchestration layer often drives the ‘Container Management Framework’ selection decision.</p>

<p>Some popular container orchestration tools are as following.</p>

<ol>
  <li><a href="https://docs.docker.com/engine/swarm/">Docker Swarm</a></li>
  <li><a href="https://kubernetes.io/">Kubernetes</a></li>
  <li><a href="http://mesos.apache.org/">Apache Mesos</a></li>
</ol>

<p>Don’t be blinded by orchestration capabilities. Focus on governance, security and policy enforcement; this will be the most important factor for production workloads.</p>

<blockquote>
  <p>Orchestration tools are very much IT operation (ITOps) focused &amp; don’t solve full life-cycle of application (Dev).</p>
</blockquote>

<p>Container Management Framework goes beyond the orchestration &amp; will not only integrate the various management elements to form a whole, but also ensure that the management elements are compatible with each other.</p>

<h3 id="good-can-you-name-some-of-container-management-framework">Good! Can you name some of Container Management Framework?</h3>

<p>Sure, followings are some popular container management frameworks.</p>

<ul>
  <li><a href="https://www.docker.com/enterprise-edition">Docker Enterprise</a></li>
  <li><a href="https://www.openshift.com/">RedHat OpenShift</a></li>
  <li><a href="https://mesosphere.com/product/">Mesosphere Enterprise DC/OS</a></li>
  <li><a href="https://coreos.com/tectonic/">CoreOS Tectonic</a></li>
  <li><a href="http://rancher.com/">Rancher</a></li>
  <li><a href="https://www.apcera.com/">Apcera</a></li>
  <li><a href="https://apprenda.com/">Apprenda</a></li>
</ul>

<p>From popular cloud providers:</p>

<ul>
  <li><a href="https://aws.amazon.com/ecs/">Amazon ECS</a></li>
  <li><a href="https://cloud.google.com/container-engine/">Google GKE</a></li>
  <li><a href="https://azure.microsoft.com/en-in/services/container-service/">Microsoft ACS</a></li>
</ul>

<h3 id="ok-what-does-container-management-framework-bring-on-table">Ok, what does container management framework bring on table?</h3>

<p><strong>1) Scheduling of containers:</strong></p>

<p><code class="highlighter-rouge">Placement, replication, scaling, rescheduling, upgrades, rollback of containers.</code></p>

<p><strong>2) Computing resource management:</strong></p>

<p><code class="highlighter-rouge">Memory, cpu, volume, port, ip, image, network of containers.</code></p>

<p><strong>3) Management of services:</strong></p>

<p><code class="highlighter-rouge">Service discovery &amp; orchestrating multiple containers together (using label, group, namespace, load balancing, readiness checking, health checking).</code></p>

<p><strong>4) Governance:</strong></p>

<p><code class="highlighter-rouge">Access control, isolation, resource utilisation, limits &amp; quotas, network segmentation &amp; encryption.</code></p>

<p>All above capabilities are usually solved by <strong>orchestration tools</strong>. There are more container management framework, can do for us.</p>

<h3 id="okey-what-else-can-container-management-framework-do-for-us">Okey! what else can container management framework do for us?</h3>

<p>They should provide seamless integration with -</p>

<p><strong>5) Image registry:</strong></p>

<p><code class="highlighter-rouge">A place where you can store &amp; distribute container (Docker) images.</code></p>

<p>Tools:</p>

<ul>
  <li><a href="https://docs.docker.com/datacenter/dtr/2.2/guides/">Docker Trusted Registry</a></li>
  <li><a href="https://quay.io/">Quay</a></li>
  <li><a href="https://www.jfrog.com/article/docker-registry/">Artifactory</a></li>
  <li>
    <p><a href="https://www.sonatype.com/docker">Nexus</a></p>
  </li>
  <li><a href="https://hub.docker.com/">Docker Hub</a></li>
  <li><a href="https://aws.amazon.com/ecr/">AWS ECR</a></li>
  <li><a href="https://cloud.google.com/container-registry/">Google Container Registry</a></li>
  <li><a href="https://azure.microsoft.com/en-in/services/container-registry/">Azure Container Registry</a></li>
</ul>

<p><strong>6) Source Control Management:</strong></p>

<p><code class="highlighter-rouge">A version control system, where your code, configs &amp; documents are being stored.</code></p>

<p>Tools:</p>

<ul>
  <li><a href="https://enterprise.github.com/home">Github</a></li>
  <li><a href="https://bitbucket.org/product">Bitbucket</a></li>
  <li><a href="https://about.gitlab.com/products/">GitLab</a></li>
  <li><a href="https://www.collab.net/downloads/subversion">SVN</a></li>
</ul>

<p><strong>7) Persistant Storage:</strong></p>

<p><code class="highlighter-rouge">Place to store all your app data. A software-defined storage (SDS)</code></p>

<p>Tools:</p>

<ul>
  <li>
    <p>Object Storage</p>

    <ul>
      <li><a href="https://aws.amazon.com/s3/">AWS S3</a></li>
      <li><a href="https://docs.openstack.org/developer/swift/">Openstack Swift</a></li>
      <li><a href="https://cloud.google.com/storage/">Google Unified Object Storage</a></li>
    </ul>
  </li>
  <li>
    <p>Block Storage</p>

    <ul>
      <li><a href="https://aws.amazon.com/ebs/">AWS EBS</a></li>
      <li><a href="https://docs.openstack.org/kilo/config-reference/content/section_block-storage-overview.html">Openstack Cinder</a></li>
      <li><a href="https://cloud.google.com/compute/docs/disks/">GCE Persistent Disk</a></li>
    </ul>
  </li>
</ul>

<p>Data is mission critical &amp; storage technologies in container world, to support stateful services, are yet to be matured.</p>

<p>You may want to continue with your traditional storage solution until world settles for stateful containers.</p>

<p><strong>8) Security solutions:</strong></p>

<p><code class="highlighter-rouge">Enforce security policies, manage secrets, security scanning, image signing.</code></p>

<p>Tools:</p>

<ul>
  <li><a href="https://docs.docker.com/engine/security/trust/content_trust/">Docker Content Trust</a></li>
  <li><a href="https://www.aquasec.com/">Aqua</a></li>
  <li><a href="https://www.twistlock.com/">Twistlock</a></li>
  <li>
    <p><a href="https://www.weave.works/">Weaveworks</a></p>
  </li>
  <li>
    <p><a href="https://www.jfrog.com/confluence/display/XRAY">JFrog Xray</a></p>
  </li>
  <li><a href="https://www.vaultproject.io/">Vault</a></li>
</ul>

<p><strong>9) Load balancer:</strong></p>

<p><code class="highlighter-rouge">To manage &amp; distribute your external traffic.</code></p>

<p>Tools:</p>

<ul>
  <li><a href="https://www.nginx.com/resources/admin-guide/load-balancer/">Ngnix</a></li>
  <li><a href="http://www.haproxy.org/">HAProxy</a></li>
  <li><a href="https://avinetworks.com/">AVI Networks</a></li>
  <li><a href="https://www.incapsula.com/load-balancer.html">Incapsula</a></li>
  <li><a href="https://www.citrix.com/products/netscaler-adc/">Citrix Netscaler</a></li>
  <li>
    <p><a href="http://dyn.com/">Dyn</a></p>
  </li>
  <li><a href="https://aws.amazon.com/elasticloadbalancing/">AWS ELB</a></li>
</ul>

<p><strong>10) Monitoring:</strong></p>

<p><code class="highlighter-rouge">Log management, Metrics collection, time-series monitoring, analytics &amp; visualisation &amp; alerting</code></p>

<p>Tools:</p>

<ul>
  <li><a href="https://www.splunk.com/">Splunk</a></li>
  <li><a href="https://www.elastic.co/products">Elastic Stack</a></li>
  <li><a href="https://www.sysdig.org/">Sysdig</a></li>
  <li><a href="https://prometheus.io/">Prometheus</a></li>
  <li>Others (<a href="https://github.com/google/cadvisor">cAdvisor</a>, <a href="http://www.fluentd.org/">Fluentd</a>, <a href="https://github.com/kubernetes/heapster">Heapster</a>, <a href="https://grafana.com/">Grafana</a> etc.)</li>
</ul>

<p><strong>11) Authentication &amp; authorisation:</strong></p>

<p><code class="highlighter-rouge">Policy compliance, role based access control (RBAC), app to app communication</code></p>

<p>Tools:</p>

<ul>
  <li><a href="https://www.ldap.com/choosing-an-ldap-server">Lightweight Directory Access Protocol (LDAP)</a></li>
  <li><a href="">Service Accounts</a></li>
  <li><a href="https://docs.microsoft.com/en-us/azure/active-directory/">MS Azure Active Directory</a></li>
  <li><a href="https://aws.amazon.com/iam/">AWS IAM</a></li>
</ul>

<p><strong>12) Continuous Integration:</strong></p>

<p><code class="highlighter-rouge">Developers to integrate code into a shared repository &amp; verified by an automated build, allowing teams to detect problems early</code></p>

<p>Tools:</p>

<ul>
  <li><a href="https://jenkins.io/">Jenkins</a></li>
  <li><a href="https://www.atlassian.com/software/bamboo">Bamboo</a></li>
  <li><a href="https://circleci.com/">CircleCI</a></li>
  <li><a href="https://travis-ci.org/">Travis CI</a></li>
  <li><a href="http://cruisecontrol.sourceforge.net/">CruiseControl</a></li>
  <li><a href="http://www.jetbrains.com/teamcity/">TeamCity</a></li>
</ul>

<p><strong>13) Continuous Delivery:</strong></p>

<p><code class="highlighter-rouge">Release into production of application that passes the automated tests, after necessary approvals</code></p>

<p>Tools:</p>

<ul>
  <li><a href="https://www.chef.io/chef/">Chef</a> / <a href="https://puppet.com/">Puppet</a> / <a href="https://www.ansible.com/">Ansible</a></li>
  <li><a href="https://www.terraform.io/">Terraform</a> &amp; <a href="https://www.packer.io/">Packer</a></li>
  <li><a href="https://cfengine.com/">CFEngine</a></li>
  <li><a href="https://saltstack.com/">SaltStack</a></li>
  <li><a href="https://developer.ibm.com/urbancode/products/urbancode-deploy/">IBM UrbanCode Deploy</a></li>
</ul>

<p><strong>14) Collaboration:</strong></p>

<p><code class="highlighter-rouge">Brings all the pieces (system alerts, notification etc.) and people/teams you need together. Enables ChatOps.</code></p>

<p>Tools:</p>

<ul>
  <li><a href="https://slack.com/">Slack</a></li>
  <li><a href="https://www.hipchat.com/">HipChat</a></li>
  <li><a href="https://products.office.com/en-in/yammer/yammer-overview">Yammer</a></li>
  <li><a href="https://gitter.im/">Gitter</a></li>
</ul>

<h3 id="hummm-anything-else-they-should-be-integrated-with">Hummm… anything else they should be integrated with…</h3>

<p>Probably also with -</p>

<p><strong>15) Cloud provider services</strong></p>

<p><strong>16) Billing system</strong></p>

<p><strong>17) Auditing system</strong></p>

<p>Phew! That’s exhaustive list!</p>

<h3 id="anything-container-management-framework-cant-do-or-will-not-do">Anything container management framework can’t do or will not do?</h3>

<p>Yes …</p>

<ul>
  <li>
    <p><strong>Infrastructure Management:</strong></p>

    <p><code class="highlighter-rouge">Infrastructure (computing, network &amp; storage) provisioning, scaling up / down, upgrading / rollback / security fixes.</code></p>
  </li>
  <li>
    <p><strong>Manage itself</strong> (Container Management Framework):</p>

    <p><code class="highlighter-rouge">Install / bootstrap, upgrade / rollback / security fixes, disaster recovery of container management framework itself.</code></p>
  </li>
</ul>

<h3 id="whaaat--then-how-am-i-gonna-get-those-things-done">WHAAAT !!? Then… how am I gonna get those things done?</h3>

<p>That is out of scope of container management. You should have cloud infrastructure.</p>

<p>Use infrastructure provisioning tool to provision your infrastructure &amp; use some configuration management tool to setup your container management framework.</p>

<p>Don’t forget to have disaster recovery plan in place.</p>

<h3 id="can-you-give-your-recommendations-on-container-management-frameworks">Can you give your recommendations on container management frameworks?</h3>

<p>Recommendations!? No! I can’t &amp; I should not. one size doesn’t fit all.</p>

<p>But I can suggest you how to reach on your decision to choose one.</p>

<ul>
  <li>
    <p>First choose a cloud provider (public / private).</p>
  </li>
  <li>
    <p>Decide on what cloud services you are gonna use to build infrastructure (VMs / bare metal).</p>
  </li>
  <li>
    <p>Make a checklist (based on your need) as listed above in this post &amp; see which Container Management Framework best suited to you.</p>
  </li>
  <li>
    <p>Choose tools which will help you to create infrastructure, deploy container management framework &amp; upgrade / patch it.</p>
  </li>
  <li>
    <p>Don’t forget to adopt DevOps tools &amp; principles for your apps. Check <a href="//blog.ashishapy.com/2015/06/devops-an-introduction-with-automation-tools/">DevOps - An Introduction</a>.</p>
  </li>
</ul>

<p>I would love to listen your feedback.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Self-Healing Systems using Docker</title>
	  <link>//2016/09/self-healing-system-using-docker/</link>
	  <author>Ashish Pandey</author>
	  <pubDate>2016-09-18T06:00:00+00:00</pubDate>
	  <guid>//2016/09/self-healing-system-using-docker/</guid>
	  <description><![CDATA[
	     <p>Imagine world where IT / Software systems do not require manual intervention to manage itself. Systems are self-sufficient. In case of disaster, systems are able to recover itself &amp; resume services. Systems are able to detect what is not working, then <em>self-heal / auto-heal / restore</em> itself to <strong>designed state</strong>.</p>

<p>If some part of system can’t be auto repaired then system should also be able to detect it, work as a <strong>circuit breaker</strong> to isolate defective part of the system. Also make sure that rest of the system don’t get impacted and operate as normal.</p>

<p>Self-Healing Microservices Systems are a big step towards building such systems.</p>

<p><em>There are three levels of self-healing systems.</em></p>

<ol>
  <li>
    <p><strong>Application Level:</strong></p>

    <p>We capture problem either through exception or through logs. It is upto developers of each service to design in such a way that it can heal itself or recover from failure. Implementation of DevOps practices or Continuous Deployment process would be great help in the direction.</p>
  </li>
  <li>
    <p><strong>System Level:</strong></p>

    <p>Systems are monitored through aspect of process failure and response time. If process fails, we need to restart the service or redeploy the service. If response time is not acceptable then we need to scale / descale the service.</p>
  </li>
  <li>
    <p><strong>Hardware Level:</strong></p>

    <p>Hard truth, we can’t self-heal hardware in case of hardware failure. We can redeploy the services to a healthy hardware / node. Or we keep monitoring the hardware and take preventive measure to scale hardware / infrastructure.</p>
  </li>
</ol>

<blockquote>
  <p>Microservices architecture, Container technologies and modern cloud (public/private) infrastructure are making possible to create Self-Healing systems.</p>
</blockquote>

<p>Here is the slides &amp; YouTube video from my recent talk on <a href="http://www.meetup.com/WebApp-Pune/events/233785424/">Self-Healing Microservices using Docker</a> (1.12.x) with <a href="http://www.meetup.com/WebApp-Pune/">WebApp-Pune meetup</a>.</p>

<p><strong>Slides:</strong></p>

<iframe src="//slides.com/ashishapy/self-healing-systems/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>

<p><strong>Youtube:</strong></p>

<p>If you just want to see Self-Healing demo and don’t have enough patient to watch full meetup event video. then jump to 1hr 26mins time or follow this YouTube link <strong><a href="https://youtu.be/eV3Ltw1qjNo?t=1h26m">Self-healing Demo</a></strong>.</p>

<p>The full video:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/eV3Ltw1qjNo" frameborder="0" allowfullscreen=""></iframe>

<p>It covers a lot of details including The 12 Factor Apps, Self-Healing, Docker, Microservices and Demo of Self-Healing Systems using Docker swarm mode.</p>

<p>Let me know your feedback or any question you have. Use comment section below or Twitter <a href="https://twitter.com/ashishapy">@ashishapy</a>.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Docker Ecosystem for Microservices</title>
	  <link>//2016/04/docker-ecosystem-for-microservice-cluster/</link>
	  <author>Ashish Pandey</author>
	  <pubDate>2016-04-17T10:00:23+00:00</pubDate>
	  <guid>//2016/04/docker-ecosystem-for-microservice-cluster/</guid>
	  <description><![CDATA[
	     <p>In previous post <a href="/2016/03/docker-with-devops/">Docker with DevOps - One step towards Microservices</a>, we talked about Microservices and how Docker with fully automated DevOps workflow helped building a microservice. The talk included hands-on Docker basics and building Automated workflow (CI / CD).</p>

<p>In the quest to deploy <strong>often and fast</strong>, be <strong>fully automatic</strong>, accomplish <strong>zero-downtime</strong>, have the <strong>ability to rollback</strong>, provide constant <strong>reliability</strong> across environments, be able to <strong>scale effortlessly</strong>, and create <strong>self-healing systems</strong> able to recuperate from failures. We derive many strategies, architecture and tools.</p>

<p>By adopting culture of Automation / DevOps, we can deliver product / software very often and fully automatic way. But having zero-downtime was challenge. <strong>Blue-Green deployment strategy</strong> is the way to deploy new version of micro-service without any down time. Blue-Green deployment strategy also gives you ability to test the new version against real production traffic and if something goes wrong, you have previous version available and you can always switch back to previous stable version of micro-service.</p>

<p>With micro-services, you get hell lots of moving parts of application. Of-course Docker helps in creating standard package for micro-services, so that we can have standardise way to handle micro-services, irrespective of technology used to build micro-services.</p>

<p>Let’s call collection of all moving parts (containers) of application a <strong>Cluster</strong> . Creating / managing cluster needs some tooling to make our task easy. Before we go further let’s see <strong>Self-Healing micro-services architecture</strong> as below.</p>

<p><img src="/assets/images/self_healing_ms.jpg" alt="Self-Healing Architecture" /></p>

<p>As part of hands-on / demo, I created a GitHub repo <a href="https://github.com/ashishapy/demo-microservices-v1">Demo-MicroServices</a>. It has steps to create a cluster using <strong>Consul</strong> as service discovery, <strong>Registrator</strong> and <strong>Docker Swarm</strong> as cluster orchestrator. The repo has few steps, how to test if cluster is working as <strong>single view</strong>.</p>

<p>In the continuation of the same, We dig deeper in the recent meet-up event at Capita, Pune. Go thorugh slides, I hope you will find many intersting things to discover.</p>

<p><strong>Slides:</strong></p>

<iframe src="//slides.com/ashishapy/docker-microservices/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>

<p>It goes in detail about Docker ecosystem for Microservices. If you have any question, shoot me either through my Twitter handle or email me. I will be more than happy to respond.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Docker with DevOps - One step towards Microservices</title>
	  <link>//2016/03/docker-with-devops/</link>
	  <author>Ashish Pandey</author>
	  <pubDate>2016-03-26T10:00:23+00:00</pubDate>
	  <guid>//2016/03/docker-with-devops/</guid>
	  <description><![CDATA[
	     <p>Microservices are slowly becoming the preferred way to build big, easy to maintain and highly scalable systems thanks to tools like <strong>Docker</strong>, CoreOS, etcd, Consul, Fleet, Mesos, Rocket, and others. Due to the goals today’s competition sets in front of us (flexibility, speed, and so on), microservices are probably the best type of architecture we can apply.</p>

<p>It’s a quest to deploy <strong>often and fast</strong>, be <strong>fully automatic</strong>, accomplish <strong>zero-downtime</strong>, have the <strong>ability to rollback</strong>, provide constant <strong>reliability</strong> across environments, be able to <strong>scale effortlessly</strong>, and create <strong>self-healing systems</strong> able to recuperate from failures.</p>

<p>Before containers became common, microservices were painful to deploy. On the other hand, monolithic applications are relatively simple to handle.</p>

<p><strong><a href="https://www.docker.com/">Docker</a></strong> made it possible to work with containers without suffering in the process. They made containers accessible and easy to use to everyone.</p>

<p>Docker allows you to package an application with all of its dependencies into a standardised unit for software development, code, runtime, system tools, system libraries – anything you can install on a server. By encapsulating and isolating everything in a container, this guarantees that the container will always run the same, regardless of the environment it is running in.</p>

<p>One can have DevOps Continuous Integration (CI), Continuous Delivery / Deployment (CD) and leverage Docker ecosystem to deliver <strong>often and fast</strong>, be <strong>fully automatic</strong>, accomplish <strong>zero-downtime</strong>, have the <strong>ability to rollback</strong> software products.</p>

<p>A reference of automated workflow below:</p>

<p><img src="/assets/images/DevOps-Automated-Workflow.jpg" alt="DevOps-Automated-Workflow" /></p>

<hr />
<p>I had organised a meet up event for learning ‘Docker with DevOps - One step towards Microservices’ with hands-on. It was great success in terms of learning and having intellectual discussion around Docker, DevOps and Microservices.</p>

<p>Slides and Youtube recording are below:</p>

<p><strong>Slides:</strong></p>

<iframe src="//slides.com/ashishapy/dockerwithdevops/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>

<p><strong>Youtube:</strong></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/-XPwp2v7HMo" frameborder="0" allowfullscreen=""></iframe>

<p>If you interested to explore about Microservices, check book “Building Microservices” by ‘Sam Newman’. Also check <a href="https://leanpub.com/the-devops-2-toolkit">the-devops-2-toolkit</a> for DevOps and tool kits.</p>

<p>Hope this will help you to have intellectual discussion around Microservices architecture. You can always reach me on my Twitter account or email me.</p>

	  ]]></description>
	</item>


</channel>
</rss>
