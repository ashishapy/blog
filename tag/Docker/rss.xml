<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>blog.ashishapy.com</title>
   
   <link>https://blog.ashishapy.com/</link>
   <description>Amused at technology</description>
   <language>en-uk</language>
   <managingEditor> Ashish Pandey</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Self-Healing Systems using Docker</title>
	  <link>//2016/09/self-healing-system-using-docker/</link>
	  <author>Ashish Pandey</author>
	  <pubDate>2016-09-18T06:00:00+00:00</pubDate>
	  <guid>//2016/09/self-healing-system-using-docker/</guid>
	  <description><![CDATA[
	     <p>Imagine world where IT / Software systems do not require manual intervention to manage itself. Systems are self-sufficient. In case of disaster, systems are able to recover itself &amp; resume services. Systems are able to detect what is not working, then <em>self-heal / auto-heal / restore</em> itself to <strong>designed state</strong>.</p>

<p>If some part of system can’t be auto repaired then system should also be able to detect it, work as a <strong>circuit breaker</strong> to isolate defective part of the system. Also make sure that rest of the system don’t get impacted and operate as normal.</p>

<p>Self-Healing Microservices Systems are a big step towards building such systems.</p>

<p><em>There are three levels of self-healing systems.</em></p>

<ol>
  <li>
    <p><strong>Application Level:</strong></p>

    <p>We capture problem either through exception or through logs. It is upto developers of each service to design in such a way that it can heal itself or recover from failure. Implementation of DevOps practices or Continuous Deployment process would be great help in the direction.</p>
  </li>
  <li>
    <p><strong>System Level:</strong></p>

    <p>Systems are monitored through aspect of process failure and response time. If process fails, we need to restart the service or redeploy the service. If response time is not acceptable then we need to scale / descale the service.</p>
  </li>
  <li>
    <p><strong>Hardware Level:</strong></p>

    <p>Hard truth, we can’t self-heal hardware in case of hardware failure. We can redeploy the services to a healthy hardware / node. Or we keep monitoring the hardware and take preventive measure to scale hardware / infrastructure.</p>
  </li>
</ol>

<blockquote>
  <p>Microservices architecture, Container technologies and modern cloud (public/private) infrastructure are making possible to create Self-Healing systems.</p>
</blockquote>

<p>Here is the slides &amp; YouTube video from my recent talk on <a href="http://www.meetup.com/WebApp-Pune/events/233785424/">Self-Healing Microservices using Docker</a> (1.12.x) with <a href="http://www.meetup.com/WebApp-Pune/">WebApp-Pune meetup</a>.</p>

<p><strong>Slides:</strong></p>

<iframe src="//slides.com/ashishapy/self-healing-systems/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>

<p><strong>Youtube:</strong></p>

<p>If you just want to see Self-Healing demo and don’t have enough patient to watch full meetup event video. then jump to 1hr 26mins time or follow this YouTube link <strong><a href="https://youtu.be/eV3Ltw1qjNo?t=1h26m">Self-healing Demo</a></strong>.</p>

<p>The full video:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/eV3Ltw1qjNo" frameborder="0" allowfullscreen=""></iframe>

<p>It covers a lot of details including The 12 Factor Apps, Self-Healing, Docker, Microservices and Demo of Self-Healing Systems using Docker swarm mode.</p>

<p>Let me know your feedback or any question you have. Use comment section below or Twitter <a href="https://twitter.com/ashishapy">@ashishapy</a>.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Docker Ecosystem for Microservices</title>
	  <link>//2016/04/docker-ecosystem-for-microservice-cluster/</link>
	  <author>Ashish Pandey</author>
	  <pubDate>2016-04-17T10:00:23+00:00</pubDate>
	  <guid>//2016/04/docker-ecosystem-for-microservice-cluster/</guid>
	  <description><![CDATA[
	     <p>In previous post <a href="/2016/03/docker-with-devops/">Docker with DevOps - One step towards Microservices</a>, we talked about Microservices and how Docker with fully automated DevOps workflow helped building a microservice. The talk included hands-on Docker basics and building Automated workflow (CI / CD).</p>

<p>In the quest to deploy <strong>often and fast</strong>, be <strong>fully automatic</strong>, accomplish <strong>zero-downtime</strong>, have the <strong>ability to rollback</strong>, provide constant <strong>reliability</strong> across environments, be able to <strong>scale effortlessly</strong>, and create <strong>self-healing systems</strong> able to recuperate from failures. We derive many strategies, architecture and tools.</p>

<p>By adopting culture of Automation / DevOps, we can deliver product / software very often and fully automatic way. But having zero-downtime was challenge. <strong>Blue-Green deployment strategy</strong> is the way to deploy new version of micro-service without any down time. Blue-Green deployment strategy also gives you ability to test the new version against real production traffic and if something goes wrong, you have previous version available and you can always switch back to previous stable version of micro-service.</p>

<p>With micro-services, you get hell lots of moving parts of application. Of-course Docker helps in creating standard package for micro-services, so that we can have standardise way to handle micro-services, irrespective of technology used to build micro-services.</p>

<p>Let’s call collection of all moving parts (containers) of application a <strong>Cluster</strong> . Creating / managing cluster needs some tooling to make our task easy. Before we go further let’s see <strong>Self-Healing micro-services architecture</strong> as below.</p>

<p><img src="/assets/images/self_healing_ms.jpg" alt="Self-Healing Architecture" /></p>

<p>As part of hands-on / demo, I created a GitHub repo <a href="https://github.com/ashishapy/demo-microservices-v1">Demo-MicroServices</a>. It has steps to create a cluster using <strong>Consul</strong> as service discovery, <strong>Registrator</strong> and <strong>Docker Swarm</strong> as cluster orchestrator. The repo has few steps, how to test if cluster is working as <strong>single view</strong>.</p>

<p>In the continuation of the same, We dig deeper in the recent meet-up event at Capita, Pune. Go thorugh slides, I hope you will find many intersting things to discover.</p>

<p><strong>Slides:</strong></p>

<iframe src="//slides.com/ashishapy/docker-microservices/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>

<p>It goes in detail about Docker ecosystem for Microservices. If you have any question, shoot me either through my Twitter handle or email me. I will be more than happy to respond.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Docker with DevOps - One step towards Microservices</title>
	  <link>//2016/03/docker-with-devops/</link>
	  <author>Ashish Pandey</author>
	  <pubDate>2016-03-26T10:00:23+00:00</pubDate>
	  <guid>//2016/03/docker-with-devops/</guid>
	  <description><![CDATA[
	     <p>Microservices are slowly becoming the preferred way to build big, easy to maintain and highly scalable systems thanks to tools like <strong>Docker</strong>, CoreOS, etcd, Consul, Fleet, Mesos, Rocket, and others. Due to the goals today’s competition sets in front of us (flexibility, speed, and so on), microservices are probably the best type of architecture we can apply.</p>

<p>It’s a quest to deploy <strong>often and fast</strong>, be <strong>fully automatic</strong>, accomplish <strong>zero-downtime</strong>, have the <strong>ability to rollback</strong>, provide constant <strong>reliability</strong> across environments, be able to <strong>scale effortlessly</strong>, and create <strong>self-healing systems</strong> able to recuperate from failures.</p>

<p>Before containers became common, microservices were painful to deploy. On the other hand, monolithic applications are relatively simple to handle.</p>

<p><strong><a href="https://www.docker.com/">Docker</a></strong> made it possible to work with containers without suffering in the process. They made containers accessible and easy to use to everyone.</p>

<p>Docker allows you to package an application with all of its dependencies into a standardised unit for software development, code, runtime, system tools, system libraries – anything you can install on a server. By encapsulating and isolating everything in a container, this guarantees that the container will always run the same, regardless of the environment it is running in.</p>

<p>One can have DevOps Continuous Integration (CI), Continuous Delivery / Deployment (CD) and leverage Docker ecosystem to deliver <strong>often and fast</strong>, be <strong>fully automatic</strong>, accomplish <strong>zero-downtime</strong>, have the <strong>ability to rollback</strong> software products.</p>

<p>A reference of automated workflow below:</p>

<p><img src="/assets/images/DevOps-Automated-Workflow.jpg" alt="DevOps-Automated-Workflow" /></p>

<hr />
<p>I had organised a meet up event for learning ‘Docker with DevOps - One step towards Microservices’ with hands-on. It was great success in terms of learning and having intellectual discussion around Docker, DevOps and Microservices.</p>

<p>Slides and Youtube recording are below:</p>

<p><strong>Slides:</strong></p>

<iframe src="//slides.com/ashishapy/dockerwithdevops/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>

<p><strong>Youtube:</strong></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/-XPwp2v7HMo" frameborder="0" allowfullscreen=""></iframe>

<p>If you interested to explore about Microservices, check book “Building Microservices” by ‘Sam Newman’. Also check <a href="https://leanpub.com/the-devops-2-toolkit">the-devops-2-toolkit</a> for DevOps and tool kits.</p>

<p>Hope this will help you to have intellectual discussion around Microservices architecture. You can always reach me on my Twitter account or email me.</p>

	  ]]></description>
	</item>


</channel>
</rss>
